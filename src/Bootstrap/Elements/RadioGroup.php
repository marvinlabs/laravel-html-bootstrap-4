<?php

namespace MarvinLabs\Html\Bootstrap\Elements;

use MarvinLabs\Html\Bootstrap\Contracts\ShowsErrors;
use MarvinLabs\Html\Bootstrap\Elements\Traits\Assemblable;
use Spatie\Html\Elements\Div;

/**
 * A group of radio components
 */
class RadioGroup extends Div implements ShowsErrors
{
    use Assemblable;

    /** @var array */
    private $radios = [];

    /** @var array */
    private $options = [];

    /** @var string|null */
    private $selectedOption = null;

    /** @var string */
    private $name = 'radio_group';

    /** @var boolean */
    private $inline = false;

    /** @var \Spatie\Html\BaseElement|null */
    private $error = null;

    /** @var \MarvinLabs\Html\Bootstrap\Contracts\FormState|null */
    private $formState = null;

    public function __construct($formState)
    {
        parent::__construct();
        $this->formState = $formState;
    }

    /** @return static */
    public function options(array $options)
    {
        $element = clone $this;
        $element->options = $options;
        $element->radios = $element->createRadios($options);

        return $element;
    }

    /** @return static */
    public function selectedOption($selectedOption)
    {
        $element = clone $this;
        $element->selectedOption = $selectedOption;

        return $element;
    }

    /** @return static */
    public function name(string $name)
    {
        $element = clone $this;
        $element->name = $name;

        return $element;
    }

    /** @return static */
    public function inline($inline = true)
    {
        $element = clone $this;
        $element->inline = $inline;

        return $element;
    }

    /**
     * For some attributes, return the value of the backing control instead of our own
     *
     * @param string $attribute
     * @param null   $fallback
     *
     * @return mixed
     */
    public function getAttribute($attribute, $fallback = null)
    {
        if ('name' === $attribute)
        {
            return $this->name;
        }

        return parent::getAttribute($attribute, $fallback);
    }

    public function __call($name, $arguments)
    {
        // Radio setters for all radios of the group
        foreach (['radio' => '', 'forgetRadio' => 'forget', 'addRadio' => 'add'] as $needle => $replacement)
        {
            if ($name !== $needle && starts_with($name, $needle))
            {
                $name = str_replace($needle, $replacement, $name);
                if (empty($name))
                {
                    return parent::__call($name, $arguments);
                }

                if (empty($replacement))
                {
                    $name = \lcfirst($name);
                }

                $element = clone $this;
                $element->radios = collect($element->radios)
                    ->map(function ($radio) use ($name, $arguments) {
                        return $radio->{$name}(...$arguments);
                    });

                return $element;
            }
        }

        return parent::__call($name, $arguments); // TODO: Change the autogenerated stub
    }

    public function showError($error)
    {
        $element = clone $this;
        $element->error = $error;

        return $element;
    }

    /** @Override */
    protected function assemble()
    {
        $element = clone $this;

        $radios = collect($element->radios);
        if ($element->error!==null)
        {
            $lastRadio = $radios->pop();
            $radios->push($lastRadio->addChild($element->error));
        }

        return $element
            ->addChildren($radios,
                function ($radio) {
                    return $radio
                        ->checked($this->getFieldValue($this->name, $this->selectedOption) == $radio->getValue())
                        ->name($this->name)
                        ->inline($this->inline);
                })
            ->addClass('radio-group');
    }

    /**
     * @param string $name
     * @param mixed  $default
     *
     * @return mixed
     */
    private function getFieldValue($name, $default)
    {
        return $this->formState !== null
            ? $this->formState->getFieldValue($name, $default)
            : $default;
    }

    private function createRadios($options): array
    {
        return collect($options)
            ->map(function ($description, $value) {
                $radio = new Radio($this->formState);
                return $radio
                    ->description($description)
                    ->value($value);
            })
            ->toArray();
    }

}
